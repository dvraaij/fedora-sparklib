--- a/sparklib_common.gpr
+++ b/sparklib_common.gpr
@@ -2,31 +2,13 @@
 
    for Source_Files use ();
 
-   --  Environment variable SPARKLIB_INSTALLED controls whether the
-   --  project and its sources are being installed as part of SPARK install
-   --  (value "True") or whether they are in source repository configuration
-   --  (value "False"). Inside SPARK install, this project file is installed
-   --  in <install>/lib/gnat and the sources in <install>/include/spark
-
-   type SPARKlib_Installed_T is ("True", "False");
-   SPARKlib_Installed : SPARKlib_Installed_T := External("SPARKLIB_INSTALLED", "True");
-
-   --  Environment variable SPARKLIB_BODY_MODE controls whether the
-   --  project is with'ed in client projects to use lemmas (value "Off"),
-   --  or whether it is being itself formally verified (value "On").
-   --  Users should not set the value of this variable to "On".
-
-   type SPARK_Body_Mode_T is ("Off", "On");
-   SPARK_Body_Mode : SPARK_Body_Mode_T := External ("SPARKLIB_BODY_MODE", "Off");
-
    package Compiler is
       --  Enforce GNAT style checks, except for multiple blank lines which does
       --  not work for preprocessed files, and alphabetical ordering of
       --  subprogram bodies (although not applicable to null subprograms).
       for Default_Switches ("Ada") use
          ("-gnat2022", "-gnatygo-u",
-	  "-gnatwI",  --  disable warnings about SPARKlib using GNAT internal units
-          "-gnateDSPARK_BODY_MODE=" & SPARK_Body_Mode);
+         "-gnatwI");  --  disable warnings about SPARKlib using GNAT internal units
    end Compiler;
 
    package Prove is
--- a/sparklib_external.gpr
+++ b/sparklib_external.gpr
@@ -2,7 +2,7 @@
 
 project SPARKlib_External is
 
-   for Externally_Built use SPARKlib_common.SPARKlib_Installed;
+   for Externally_Built use "True";
 
    -- This project is not supposed to be used directly. Instead, copy
    -- sparklib.gpr in your code and provide appropriate values for the object
@@ -11,14 +11,7 @@
    -- Excluded_Source_Files (so that you only compile and analyse files from
    -- the library that you need).
 
-   case SPARKlib_common.SPARKlib_Installed is
-      when "True" =>
-         for Source_Dirs use (SPARKlib_External'Project_Dir & "/../../include/spark");
-      when others =>
-         for Source_Dirs use (SPARKlib_External'Project_Dir & "/src");
-   end case;
-
-   SPARK_Body_Mode : SPARKlib_common.SPARK_Body_Mode_T := SPARKlib_common.SPARK_Body_Mode;
+   for Source_Dirs use (SPARKlib_External'Project_Dir & "/../../include/spark");
 
    package Compiler is
       --  Enforce GNAT style checks, except for multiple blank lines which does
@@ -26,8 +19,7 @@
       --  subprogram bodies (although not applicable to null subprograms).
       for Default_Switches ("Ada") use
          ("-gnat2022", "-gnatygo-u", "-gnata",
-	  "-gnatwI",  --  disable warnings about SPARKlib using GNAT internal units
-          "-gnateDSPARK_BODY_MODE=" & SPARK_Body_Mode);
+         "-gnatwI");  --  disable warnings about SPARKlib using GNAT internal units
    end Compiler;
 
    package Prove renames SPARKlib_common.Prove;
@@ -48,22 +40,7 @@
 				  "spark-containers-functional-vectors__light.ads",
 				  "spark-containers-types__light.ads");
 
-   case SPARK_Body_Mode is
-      when "On" =>
-         for Excluded_Source_Files use Common_Excluded_Source_Files
-                                       & ("spark-containers.ads");
-      when "Off" =>
-         for Excluded_Source_Files use Common_Excluded_Source_Files
-                                       & ("spark-containers__exec.ads");
-   end case;
-
-   package Naming is
-      case SPARK_Body_Mode is
-         when "On" =>
-            for Spec ("SPARK.Containers") use "spark-containers__exec.ads";
-         when "Off" =>
-            null;
-      end case;
-   end Naming;
+   for Excluded_Source_Files use Common_Excluded_Source_Files
+                                 & ("spark-containers__exec.ads");
 
 end SPARKlib_External;
--- a/sparklib_light_external.gpr
+++ b/sparklib_light_external.gpr
@@ -5,7 +5,7 @@
 
 project SPARKlib_Light_External is
 
-   for Externally_Built use SPARKlib_common.SPARKlib_Installed;
+   for Externally_Built use "True";
 
    -- This project is not supposed to be used directly. Instead, copy
    -- sparklib.gpr in your code and provide appropriate values for the object
@@ -14,14 +14,7 @@
    -- Excluded_Source_Files (so that you only compile and analyse files from
    -- the library that you need).
 
-   case SPARKlib_common.SPARKlib_Installed is
-      when "True" =>
-         for Source_Dirs use (SPARKlib_Light_External'Project_Dir & "/../../include/spark");
-      when others =>
-         for Source_Dirs use (SPARKlib_Light_External'Project_Dir & "/src");
-   end case;
-
-   SPARK_Body_Mode := SPARKlib_common.SPARK_Body_Mode;
+   for Source_Dirs use (SPARKlib_Light_External'Project_Dir & "/../../include/spark");
 
    package Compiler renames SPARKlib_common.Compiler;
 
